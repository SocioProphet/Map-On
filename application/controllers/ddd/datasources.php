<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Datasources extends CI_Controller {

	function __construct()
	{
		parent::__construct();	
		$this->load->model("Datasources_model", "datasources");
		$this->load->model("Mappings_model", "mappings");
		$this->load->model("Table_datatypes_model", "datatypes");
		$this->load->model("Workspaces_model", "workspaces_model");
		$this->load->model("Prefixes_model", "prefixes_model");
		$this->load->model("Log_model", "log");
		$this->load->model("Messages_model", "messages");
		$this->load->model("Energymodel_model", "energymodel");
		$this->load->model("Table_mappings_constrained", "constrains");
	}
		
	public function index()
	{
		if (!$this->ion_auth->logged_in()){
			redirect('auth/login', 'refresh');
		}
		
		$vars['ds'] = $this->datasources->getDataSources();
		
		$this->load->view('header');
		$this->load->view('datasources_list', $vars);
		$this->load->view('footer');
	}
	
	function delete($id = 0)
	{
		if (!$this->ion_auth->logged_in() || !$this->ion_auth->is_admin()){
			redirect('auth/login', 'refresh');
		}
		
		if((int)$id==0)
			redirect("error/index/datasources/delete");

		$ds = $this->datasources->getDataSource($id)->result();
		
		$this->datasources->delete($id);
		
		// We remove the tables generated by the workspace
		$store_Mysql = $this->workspaces_model->connect_workspace("datasource_".$id);
		$store_Mysql->drop();		
		
		
		$this->log->write("has deleted ".$ds[0]->name." data source", "datasources");

		$this->load->helper('url');  
		
		$this->index();	
	}
	
	function view($id = 0)
	{
		if (!$this->ion_auth->logged_in()){
			redirect('auth/login', 'refresh');
		}
		
		$ds = $this->datasources->getDataSource($id)->row_array();
		
		$vars['ds_tables'] = $this->mappings->getTables($id);
		
		$vars['msg'] = $this->messages->get("datasources", $id);
	
		
		$this->load->view('header');
		$this->load->view('datasource_header', $ds);
		$this->load->view('datasources_view', $vars);
		$this->load->view('footer');		
	}
	
	function explore($datasourceid, $mappingid)
	{
		if (!$this->ion_auth->logged_in()){
			redirect('auth/login', 'refresh');
		}

		$data = $this->datasources->getDataSource($datasourceid)->row_array();

		$id = 1;
        
		$ds = $this->mappings->getTable($mappingid)->result();
		
        //call function to create graph
		$selected_workspace = "datasource_". $datasourceid;
        $selected_class = $ds[0]->name;
        $data = array_merge($data, $this->create_var_graph($id, $selected_class, $selected_workspace));
        
        $data['focused_class'] = $selected_class;
        $data['color'] = "graph";
        $data['subclassOf'] = "active";
        $data['workspace'] = $selected_workspace;
        
		
		$this->load->view('header');
        $this->load->view('rgraph/visualization',$data);
//		$this->load->view('datasources_explore', $vars);
		$this->load->view('footer');
	}
	
	public function visualization(){
        $this->load->helper('form');
        
				
        //init subclassOf
        $subclassOf = $this->input->post('subclassOf');
        if($subclassOf != null){
            $this->session->set_userdata('subclassOf', $this->input->post('subclassOf'));
        }else{
            $subclassOf = $this->session->userdata('subclassOf');
            if($subclassOf == null){
                $this->session->set_userdata('subclassOf', 'active');
                $subclassOf = 'active';
            }
        }
        
        //init color 
        $color = $this->session->userdata('graph_color');
        if($color == null){
            $color = 'graph';
        }
        
        //if is the first call save workspace
        $selected_workspace = $this->input->post('selected_workspace');
        if($selected_workspace != NULL){
            $current_workspace = array();
            $current_workspace[0] = $selected_workspace; 
            $this->session->set_userdata('current_workspace', $current_workspace);
        }else{
            $selected_workspaces = $this->session->userdata('current_workspace');
            $selected_workspace = $selected_workspaces[0];
        }
        
        $id = 1;
        
        //call function to create graph
        $selected_class = $this->input->post('selected_class');
        $data = $this->create_var_graph($id,$selected_class,$selected_workspace);
        
		
		$datasourceid = $this->input->post('datasourceid');
		if($datasourceid != null){
			//$data = $this->datasources->getDataSource($datasourceid)->row_array();
			$data = array_merge($data,  $this->datasources->getDataSource($datasourceid)->row_array());
		}

		
        $data['focused_class'] = $selected_class;
        $data['color'] = $color;
        $data['subclassOf'] = $subclassOf;
        $data['workspace'] = $selected_workspace;
        
		//print_r($data);
		
		$this->load->view('header');
        $this->load->view('rgraph/visualization',$data);
		$this->load->view('footer');
    }
	
	
	
	function createnew()
	{
		if (!$this->ion_auth->logged_in()){
			redirect('auth/login', 'refresh');
		}
		
		$this->load->view('header');
		$this->load->view('datasources_createnew');
		$this->load->view('footer');
	}
	
	function create_new_datasource_post()
	{
		if ((($_FILES["owl_file_input"]["type"] == "application/octet-stream") || ($_FILES["owl_file_input"]["type"] == "application/rdf+xml")) && ($_FILES["owl_file_input"]["size"] < 6000000)){
        
			////////////////////////////////////////////////////
			// Insert datasource descriptive fields
			$name = $this->input->post('input_name');
			$description = $this->input->post('input_description');
			$scale = $this->input->post('select_scale');
			$location = $this->input->post('input_location');
			$owner = $this->input->post('input_owner');
			
			$inputOWL = $_FILES['owl_file_input']['name'];
			$inputN3 = $_FILES['n3_file_input']['name'];
			
			$IDdatasource = $this->datasources->addDataSource($name, $description, $scale, $location, $owner, $inputOWL, $inputN3);
			
			// upload file
			$target_path = "./upload/";
			$target_path = $target_path . basename( $IDdatasource."_".$_FILES['owl_file_input']['name']); 
			
			// upload N3 file
			$target_pathN3 = "./upload/";
			$target_pathN3 = $target_pathN3 . basename( $IDdatasource."_".$_FILES['n3_file_input']['name']); 
		
			if ((($_FILES["n3_file_input"]["type"] == "application/octet-stream") || ($_FILES["n3_file_input"]["type"] == "text/n3")) && ($_FILES["n3_file_input"]["size"] < 6000000)){
			
				if(move_uploaded_file($_FILES['n3_file_input']['tmp_name'], $target_pathN3)) {
				}
			}
			
            if(move_uploaded_file($_FILES['owl_file_input']['tmp_name'], $target_path)) {

				////////////////////////////////////////////////////
				//read owl/rdf file
                include_once("public/arc2/ARC2.php");
                
                $parser = ARC2::getRDFParser();
                $parser->parse('./upload/'.$IDdatasource."_".$_FILES['owl_file_input']['name']);
                $triples = $parser->getTriples();
				
				for ($i = 0, $i_max = count($triples); $i < $i_max; $i++) {
					$triple = $triples[$i];
					
//					echo "Triple ".$i.": ".$triple['s']." ". $triple['p']. " ". $triple['o']."<br>";
					//If the triple is a class we insert it in the Tables table.
					if($triple['p'] == "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" && $triple['o'] == "http://www.w3.org/2002/07/owl#Class") {
//						echo "triple:".$triple['s']." p: ".$triple['p']." o: ".$triple['o']."<br/>";

						$this->datasources->addTablesToDataSource($triple['s'], $triple['s'], 1, "", 0, 0, $IDdatasource);
					}
					//If the triple is a comment, then we update the description of the table
					if($triple['p'] == "http://www.w3.org/2000/01/rdf-schema#comment") {
//						echo "updating comments...<br>";
						$this->datasources->updateComment($triple['s'], $triple['o']);
					}
				}

				$store_Mysql = $this->workspaces_model->connect_workspace("datasource_".$IDdatasource);

				$store_Mysql->setUp(); 
				$store_Mysql->insert($triples, 'rows');
				
				///////////////////////////////////////////////////////////////////////////////////
				// For eacht table, we are going to search for its datatypes.
				
				$tables = $this->mappings->getTables($IDdatasource);
				
				foreach($tables as $t) {
				
					$q = "SELECT ?name WHERE {
							?name <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#DatatypeProperty>.
							?name <http://www.w3.org/2000/01/rdf-schema#domain> <".$t->name.">.
							}";
					$ret = $store_Mysql->query($q,'rows');
					
//					echo " Datatypes for ".$t->name." " .count($ret)."<br>";
					/// 13.11.2012 <-- ASG
					foreach($ret as $dt) {
//						$this->datatypes->add($ret[0]["name"], $ret[0]["name"], $t->id);
						$this->datatypes->add($dt["name"], $dt["name"], $t->id);
					}
				}
				//
				///////////////////////////////////////////////////////////////////////////////////

				///////////////////////////////////////////////////////////////////////////////////
				// We are going to find and add domain and ranges for objectproperties
				
				$qDomain = 'SELECT  ?objproperties ?domain WHERE {
							?objproperties <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty>.
							?b1 ?y ?objproperties .
							?b1 <http://www.w3.org/2000/01/rdf-schema#subClassOf> ?domain.
					}';
							
				$qRange = 'select ?objproperties ?range where { 
							?objproperties <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty>.
							?b1 <http://www.w3.org/2002/07/owl#inverseOf> ?objproperties .
							?b2 <http://www.w3.org/2002/07/owl#onProperty> ?b1.
							?b2 <http://www.w3.org/2000/01/rdf-schema#subClassOf> ?range.
					}';	
				
				$ret = $store_Mysql->query($qRange,'rows');

				$newtriples = array();
				
				
				foreach($ret as $t){
					$nt["s"] = $t["objproperties"];
					$nt["p"] = "http://www.w3.org/2000/01/rdf-schema#range";
					$nt["o"] = $t["range"];
					$nt["s_type"] = "uri";
					$nt["o_type"] = "uri";
					$nt["o_datatype"] = "";
					$nt["o_lang"] = "";
					
					array_push($newtriples, $nt);
				}
				$store_Mysql->insert($newtriples, 'rows');    				


				$ret = $store_Mysql->query($qDomain,'rows');
	
				$newtriples = array();
				
				foreach($ret as $t){
					$nt["s"] = $t["objproperties"];
					$nt["p"] = "http://www.w3.org/2000/01/rdf-schema#domain";
					$nt["o"] = $t["domain"];
					$nt["s_type"] = "uri";
					$nt["o_type"] = "uri";
					$nt["o_datatype"] = "";
					$nt["o_lang"] = "";
					
					array_push($newtriples, $nt);
				}
				$store_Mysql->insert($newtriples, 'rows');    				
				//
				///////////////////////////////////////////////////////////////////////////////////
				//
				
				
				
				//
				///////////////////////////////////////////////////////////////////////////////////
				//We are going to parse the N3 to gather different data needed for the mapping
				$this->parseN3ToAddExtraData($IDdatasource, './upload/'.$IDdatasource."_".$_FILES['n3_file_input']['name']);
				
				$this->log->write("has created <a href='index.php/datasources/view/".$IDdatasource."'>".$name."</a> data source", "datasources");
                
            } else{
//                echo "There was an error uploading the file, please try again!";
            }
        }else{
//            echo "Type or size file was invalid.";
        }

		
		//$this->index();
	}
	
	function edit($id)
	{
		if (!$this->ion_auth->logged_in()){
			redirect('auth/login', 'refresh');
		}

		$vars = $this->datasources->getDataSource($id)->row_array();
	
		$this->load->view('header');
		$this->load->view('datasources_edit', $vars);
		$this->load->view('footer');
	}
	
	function edit_datasource_post()
	{
		////////////////////////////////////////////////////
		// Insert datasource descriptive fields
		$id = $this->input->post('input_id');
		$name = $this->input->post('input_name');
		$description = $this->input->post('input_description');
		$scale = $this->input->post('select_scale');
		$location = $this->input->post('input_location');
		$owner = $this->input->post('input_owner');
		$inputOWL = $_FILES['owl_file_input']['name'];
		$inputN3 = $_FILES['n3_file_input']['name'];
		
		$this->datasources->updateDataSource($id, $name, $description, $scale, $location, $owner, $inputOWL, $inputN3);
	
		// upload file
		$target_path = "./upload/";
		$target_path = $target_path . basename( $id."_".$_FILES['owl_file_input']['name']); 
		
		// upload N3 file
		$target_pathN3 = "./upload/";
		$target_pathN3 = $target_pathN3 . basename( $id."_".$_FILES['n3_file_input']['name']); 
	
		if ((($_FILES["n3_file_input"]["type"] == "application/octet-stream") || ($_FILES["n3_file_input"]["type"] == "text/n3")) && ($_FILES["n3_file_input"]["size"] < 6000000)){
		
			if(move_uploaded_file($_FILES['n3_file_input']['tmp_name'], $target_pathN3)) {
			}
		}
		
		if(move_uploaded_file($_FILES['owl_file_input']['tmp_name'], $target_path)) {

		
			////////////////////////////////////////////////////
			//read owl/rdf file
			include_once("public/arc2/ARC2.php");
			
			$parser = ARC2::getRDFParser();
			$parser->parse('./upload/'.$id."_".$_FILES['owl_file_input']['name']);
			$triples = $parser->getTriples();
			
			for ($i = 0, $i_max = count($triples); $i < $i_max; $i++) {
				$triple = $triples[$i];
				
//					echo "Triple ".$i.": ".$triple['s']." ". $triple['p']. " ". $triple['o']."<br>";
				//If the triple is a class we insert it in the Tables table.
				if($triple['p'] == "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" && $triple['o'] == "http://www.w3.org/2002/07/owl#Class") {
//						echo "triple:".$triple['s']." p: ".$triple['p']." o: ".$triple['o']."<br/>";

					//The method tests if the table already exists.
					$this->datasources->addTablesToDataSource($triple['s'], $triple['s'], 1, "", 0, 0, $id);
				}
				//If the triple is a comment, then we update the description of the table
				if($triple['p'] == "http://www.w3.org/2000/01/rdf-schema#comment") {
//						echo "updating comments...<br>";
					$this->datasources->updateComment($triple['s'], $triple['o']);
				}
			}

			$store_Mysql = $this->workspaces_model->connect_workspace("datasource_".$id);

			$store_Mysql->setUp(); 
			$store_Mysql->insert($triples, 'rows');
				
			///////////////////////////////////////////////////////////////////////////////////
			// For eacht table, we are going to search for its datatypes.
			
			$tables = $this->mappings->getTables($id);
			
			foreach($tables as $t) {
			
				$q = "SELECT ?name WHERE {
						?name <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#DatatypeProperty>.
						?name <http://www.w3.org/2000/01/rdf-schema#domain> <".$t->name.">.
						}";
				$ret = $store_Mysql->query($q,'rows');
				
//					echo " Datatypes for ".$t->name." " .count($ret)."<br>";
				/// 13.11.2012 <-- ASG
				foreach($ret as $dt) {
//						$this->datatypes->add($ret[0]["name"], $ret[0]["name"], $t->id);
					$this->datatypes->add($dt["name"], $dt["name"], $t->id);
				}
			}
			//
			///////////////////////////////////////////////////////////////////////////////////
			// We are going to find and add domain and ranges for objectproperties
			
			$qDomain = 'SELECT  ?objproperties ?domain WHERE {
						?objproperties <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty>.
						?b1 ?y ?objproperties .
						?b1 <http://www.w3.org/2000/01/rdf-schema#subClassOf> ?domain.
				}';
						
			$qRange = 'select ?objproperties ?range where { 
						?objproperties <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty>.
						?b1 <http://www.w3.org/2002/07/owl#inverseOf> ?objproperties .
						?b2 <http://www.w3.org/2002/07/owl#onProperty> ?b1.
						?b2 <http://www.w3.org/2000/01/rdf-schema#subClassOf> ?range.
				}';	
			
			$ret = $store_Mysql->query($qRange,'rows');

			$newtriples = array();
			
			foreach($ret as $t){
				$nt["s"] = $t["objproperties"];
				$nt["p"] = "http://www.w3.org/2000/01/rdf-schema#range";
				$nt["o"] = $t["range"];
				$nt["s_type"] = "uri";
				$nt["o_type"] = "uri";
				$nt["o_datatype"] = "";
				$nt["o_lang"] = "";
				
				array_push($newtriples, $nt);
			}
			$store_Mysql->insert($newtriples, 'rows');    				


			$ret = $store_Mysql->query($qDomain,'rows');

			$newtriples = array();
			
			foreach($ret as $t){
				$nt["s"] = $t["objproperties"];
				$nt["p"] = "http://www.w3.org/2000/01/rdf-schema#domain";
				$nt["o"] = $t["domain"];
				$nt["s_type"] = "uri";
				$nt["o_type"] = "uri";
				$nt["o_datatype"] = "";
				$nt["o_lang"] = "";
				
				array_push($newtriples, $nt);
			}
			$store_Mysql->insert($newtriples, 'rows');    				
			//
			///////////////////////////////////////////////////////////////////////////////////


			///////////////////////////////////////////////////////////////////////////////////
			//We are going to parse the N3 to gather different data needed for the mapping
			$this->parseN3ToAddExtraData($id, './upload/'.$id."_".$_FILES['n3_file_input']['name']);
			
				
			
		} else{
//            echo "There was an error uploading the file, please try again!";
		}
        
		
		
		
		
		
		$this->log->write("has modified <a href='index.php/datasources/view/".$id."'>".$name."</a> data source", "datasources");
		
		$this->index();
	}
	
	///////////////////////////////////////////////////////
	// This function updates the header edited by the user
	function editheader()
	{
		////////////////////////////////////////////////////
		// Insert datasource descriptive fields
		$id = $this->input->post('datasource_id');
		$header = $this->input->post('input_text');
		
		$this->datasources->updateHeader($id, $header);
		
		$ds = $this->datasources->getDataSource($id)->result();
		
		$this->log->write("has modified the header of <a href='index.php/datasources/view/".$id."'>".$ds[0]->name."</a>", "datasources");
		
		$this->view($id);
	}
	
	//This function generates the data source OWL and Mapping files, also 
	//generates a a new version of the Energy Model
	function export($id = 0)
	{
		if (!$this->ion_auth->logged_in()){
			redirect('auth/login', 'refresh');
		}
		
		
		$ds = $this->datasources->getDataSource($id)->row_array();
	
		$vars["text"] = "Exporting from ".$ds["name"]." --> ".$ds["inputOWL"]." & ".$ds["inputN3"]."<br />";
		
		$vars["text"] = $vars["text"]. "<hr><br> OWL generation <br>";
		$vars["text"] = $vars["text"]. $this->datasources->export_owl($id, "./upload/".$id."_".$ds["inputOWL"], "./download/".$id."_".$ds["inputOWL"]);
		
		$vars["text"] = $vars["text"]. "<hr><br> N3 generation <br>";
		//$vars["text"] = $vars["text"]. $this->datasources->export_d2rq_mapping($id, "./upload/".$id."_".$ds[0]->inputN3, "./download/".$id."_".$ds[0]->inputN3);
		//$vars["text"] = $vars["text"]. $this->datasources->export_d2rq_mapping($id, "./upload/".$id."_".$ds["inputN3"], "./download/".$id."_".$ds["inputN3"]);
		$vars["text"] = $vars["text"]. $this->datasources->export_d2rq_mapping_new($id, "./upload/".$id."_".$ds["inputN3"], "./download/".$id."_".$ds["inputN3"]);
		
		$vars["text"] = $vars["text"]. "<hr><br> R2RML generation <br>";
		$vars["text"] = $vars["text"]. $this->datasources->export_R2RML_mapping_new($id, "./upload/".$id."_".$ds["inputN3"], "./download/".$id."_".$ds["inputN3"]."_R2RML.ttl");
		
		$vars["text"] = $vars["text"]. "<hr><br> Completed <br>";


		$this->load->view('header');
		
		$this->load->view('datasource_header', $ds);

		$this->load->view('datasources_export', $vars);

		$this->load->view('footer');	
	}
	
	
	function comment_post()
	{
		$id = $this->input->post('datasource_id');
		$name = $this->input->post('datasource_name');
		$message = $this->input->post('input_message');
		
		$this->messages->write($message, "datasources", $id);
		$this->log->write("on <a href='index.php/datasources/view/".$id."'>".$name."</a>: <span style='font-style:italic'>".substr($message, 0, 30)."...</span>", "datasources", $id);
		
		$this->view($id);
	}
	
	function delete_message($id=0, $messageid = 0)
	{
		$this->messages->delete($messageid);
		
		$ds = $this->datasources->getDataSource($id)->result();
		
		$this->log->write("delete a message on <a href='index.php/datasources/view/".$id."'>".$ds[0]->name."</a>", "datasources", $id);

		$this->view($id);
		
	}
	
	
	///////////////////////////////////////////////////////////////
	// This function reads the N3 file to gather the following data:
	//    - n3 header
	//    - Foreach tablerow
	//         - Table.Column used
	//         - Object properties of the tables
	//
	function parseN3ToAddExtraData($dsid, $filename)
	{
		$str = implode("\n",file($filename));
		
		///////////////////////////////////
		// 1. Searching for the header.
		$pos = strpos($str, "######");
		
		if ($pos !== false) {

			$header = substr($str, 0, $pos);
			$header= "@prefix semanco: <http://www.semanticweb.org/ontologies/2011/10/SEMANCO.owl#> .\r\n\n".$header;
			$header= "@prefix sumo: <http://www.owl-ontologies.com/SUMO155.owl#> .\r\n\n".$header;
						
			$this->datasources->updateHeader($dsid, $header);
		}
		
		////////////////////////////////////
		// 2. We retrieve all tables of the datasource
		$tableslist = $this->mappings->getTables($dsid);
			
		foreach($tableslist as $table) {
			
			$classname = $this->prefixes_model->get_prefix_and_uri($table->name);
			
//			echo "looking for: ".$classname["class"]."<br>";
			
			//////////////////////
			// 2.1. Retrieving the Table.Column used to map
			$strClassmap = $this->findMapClass($str, 0, $classname["class"]);
		
			$databasecolumn = $this->extractClassDatabasecolumn($strClassmap);
			$prefix = $this->extractClassPrefix($strClassmap, $classname["class"]);
			
			$this->prefixes_model->modifyPrefix($classname["uri"], $prefix);
//			echo "prefix: $prefix<br>";
			
			//We modify the mappings 
			$this->mappings->updateDatabasecolumn($table->id, $databasecolumn);
			//We add the table.column to the list of the datasource.
			$this->datasources->addDatabasecolumn($dsid, $databasecolumn);
			
			//////////////////////
			//2.2 Retrieving all the object properties of the table given
			
			$strObjectPropertyList = $this->findAllJoingingMapClass($str, $classname["class"]);
			
			echo "Count: ".count($strObjectPropertyList)."<br>";
			
			foreach($strObjectPropertyList as $strObjectProperty) {
			
				echo "strObjec: $strObjectProperty | id: $dsid <br>";
				if($strObjectProperty != "") {
				
					$table2 = $this->mappings->getTableByName($strObjectProperty, $dsid);
				
					$this->mappings->addTableRelationTable($table->id, $table2->id);
				}
			}
			
			//////////////////////
			//2.3 Retrieving all the data properties of the table given
			
			$strDataPropertyList = $this->findAllPropertyBridge($str, $classname["class"]);
			
			foreach($strDataPropertyList as $strDataProperty) {
			
//				echo "DataProp:  ".$strDataProperty[0]."<br>";
								
				//$this->mappings->addTableRelationTable($table->id, $table2->id);
				
				//We add the databasecolumn to the datatype
				$this->datatypes->updateDatabasecolumn($table->id, $strDataProperty[0]); 
				//We add the datatype to the datatype
				$this->datatypes->updateDatatype($table->id, $strDataProperty[1]); 
				
				//We add the table.column to the list of the datasource.
				$this->datasources->addDatabasecolumn($dsid, $strDataProperty[0]);
			}
		}	
	}
	
	
	/////////////////////////////////////////////////////
	// This function search for a map:...... block and return it.
	// Domain and ranges are input parameters.
	// And parameter refers if domain and range must match with the block or only one of them it is necessary.
	//
	function findMapClass ($str, $pos, $classname)
	{
		$ret = "";
		
		$pos = strpos($str, "map:".strtolower($classname)." a d2rq:ClassMap;", $pos);
		if ($pos !== false) {

		//We look for the final postion of the joining block
			$pos2 = strpos($str, "#", $pos);
			
			if ($pos2 !== false) {

				$ret = substr($str, $pos, $pos2-$pos);
			}
		}
		
		return ($ret);
	}
	
	
	function extractClassDatabasecolumn($strClassmap)
	{
		$ret = "";
		
		$pos = strpos($strClassmap, "@@");
			
		if ($pos !== false) {
		
			$pos2 = strpos($strClassmap, "@@", $pos+2);
			
			if ($pos2 !== false) {
			
				$ret = substr($strClassmap, $pos+2, $pos2-$pos-2);
			}
		}
		return $ret;
				
	}
	
	
	function extractClassPrefix($strClassmap, $class)
	{
		$ret = "";
		
		$pos = strpos($strClassmap, "d2rq:class");
			
		if ($pos !== false) {
		
			$pos2 = strpos($strClassmap, ";", $pos);
			
			if ($pos2 !== false) {
			
				$ret = substr($strClassmap, $pos, $pos2-$pos);
				
				$ret = str_replace("d2rq:class ", "", $ret);
				$ret = str_replace(":".$class, "", $ret);
			}
		}

		return $ret;
	}
	
	
	///////////////////////////////////////////////////////////////////
	// this function looks for the object properties of a given class
	// it retrieves the ranges.
	
	
	function findAllJoingingMapClass ($str, $classname)
	{
		$list = array();
		
		$pos = 0;
		$end = true;
			
		while($end) {
		
			$strOP = $this->findJoingingMapClass($str, $pos, $classname);
			
			if($strOP != "") {
				$range = $this->extractRange($strOP);

				array_push($list, $range);
			}

			$pos = strpos($str, "map:joining_", $pos+10);
			
			if ($pos === false) {
				$end = false;
			}
		}
		
		return $list;
	}
				
				
	/////////////////////////////////////////////////////
	// This function search for a map:...... block and return it.
	// Domain and ranges are input parameters.
	// And parameter refers if domain and range must match with the block or only one of them it is necessary.
	//
	function findJoingingMapClass ($str, &$pos, $classname)
	{
		$ret = "";
		
		$pos = strpos($str, "map:joining_", $pos);
		if ($pos !== false) {

			//We look for the final postion of the joining block
			$pos3 = strpos($str, "@@\";", $pos);
			$pos2 = strpos($str, "d2rq:belongsToClassMap map:".strtolower($classname).";", $pos);
			
			if ($pos2 !== false && $pos3 !== false) {
			
				if ($pos2 < $pos3) {
					$ret = substr($str, $pos, $pos3-$pos);
				}
			}
		}
		
		return ($ret);
	}
	
	function extractRange($strObjectProperty)
	{
		$ret = "";
		
		$pos = strpos($strObjectProperty, "d2rq:property");
			
		if ($pos !== false) {
		
			$pos2 = strpos($strObjectProperty, ";", $pos);
			
			if ($pos2 !== false) {
			
				$ret = substr($strObjectProperty, $pos, $pos2-$pos);
				
				$ret = str_replace("d2rq:property ", "", $ret);
				$ret = str_replace(":has", ":", $ret);
				
				$ret = $this->prefixes_model->get_uri($ret);
			}
		}
		return $ret;
				
	}

	///////////////////////////////////////////////////////////////////
	// this function looks for all data properties of a given class
	// it retrieves the:
	//   d2rq:column "gasbills.Municipalityname";
	//   d2rq:datatype xsd:string;
	
	function findAllPropertyBridge ($str, $classname)
	{
		$list = array();
		
		$pos = 0;
		$end = true;
			
		while($end) {
		
			$strDP = $this->findPropertyBridge ($str, $pos, $classname);
			
			//echo "data: ".$strDP."<br>";
			if($strDP != "") {
				$DatabaseColumn = $this->extractPropertyDatabaseColumn($strDP);
				$Datatype = $this->extractDatatype($strDP);

				//echo "DatabaseColumn: ".$DatabaseColumn." - ".$Datatype."<br>";
				array_push($list, array($DatabaseColumn, $Datatype));
			}

			$pos = strpos($str, " a d2rq:PropertyBridge;", $pos+10);
			
			if ($pos === false) {
				$end = false;
			}
		}
		
		return $list;
	}
	  
	/////////////////////////////////////////////////////
	// This function search for a map:joining... block and return it.
	// Domain is input/output parameters.
	// And parameter refers if domain and range must match with the block or only one of them it is necessary.
	//
	function findPropertyBridge ($str, &$pos, $classname)
	{
		$bDomain = false;
		$bRange = false;
		$ret = "";
		
		$pos = strpos($str, " a d2rq:PropertyBridge;", $pos);
		if ($pos !== false) {
		
			//We look for the final postion of the joining block
			$pos2 = strpos($str, "#", $pos);

			if ($pos2 !== false) {
				
				$pos3 = strrpos($str, "map:", -(strlen($str)-$pos));
				
				if ($pos3 !== false) {
					$ret = substr($str, $pos3, $pos2-$pos3);
					
					$pos3 = strpos($ret, "d2rq:belongsToClassMap map:".strtolower($classname).";");
					$pos4 = strpos($ret, "d2rq:column \"");
					
					if($pos3 === false || $pos4 === false) {
						$ret = "";
					}
				}
			}
		}
		
		return ($ret);
	}
		
	function extractPropertyDatabaseColumn($strDataProperty)
	{
		$ret = "";
		
		$pos = strpos($strDataProperty, "d2rq:column");
			
		if ($pos !== false) {
		
			$pos2 = strpos($strDataProperty, ";", $pos);
			
			if ($pos2 !== false) {
			
				$ret = substr($strDataProperty, $pos, $pos2-$pos);
				
				$ret = str_replace("d2rq:column ", "", $ret);
				$ret = str_replace("\"", "", $ret);
			}
		}
		return $ret;		
	}
		
	function extractDatatype($strDataProperty)
	{
		$ret = "";
		
		$pos = strpos($strDataProperty, "d2rq:datatype");
			
		if ($pos !== false) {
		
			$pos2 = strpos($strDataProperty, ";", $pos);
			
			if ($pos2 !== false) {
			
				$ret = substr($strDataProperty, $pos, $pos2-$pos);
				
				$ret = str_replace("d2rq:datatype ", "", $ret);
			}
		}
		return $ret;		
	}
}

